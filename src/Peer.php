<?php

declare(strict_types=1); // @codeCoverageIgnore

namespace Rinq;

use Rinq\Exception\InvalidNamespaceException;
use Rinq\Ident\PeerId;

/*
 * Peer represents a connection to a Rinq network.
 *
 * Peers can act as a server, responding to application-defined commands.
 * Use Peer::listen() to start accepting incoming command requests.
 *
 * Command requests are sent by sessions, represented by the Session interface.
 * Sessions can also send notifications to other sessions. Sessions are created
 * by calling Peer::session().
 *
 * Each peer is assigned a unique ID, which is represented by {@see PeerId}.
 * All IDs generated by the peer, such as session IDs and message IDs contain
 * the peer ID, so that they can be traced to their origin easily.
 */
interface Peer
{
    /**
     * The peer's unique identifier.
     */
    public function id(): PeerId;

    /**
     * Session creates and returns a new session owned by this peer.
     *
     * Creating a session does not perform any network IO. The only limit to the
     * number of sessions is the memory required to store them.
     *
     * Sessions created after the peer has been stopped are unusable. Any
     * operation will fail immediately.
     */
    public function session(): Session;

    /**
     * Listen starts listening for command requests in the given namespace.
     *
     * When a command request is received with a namespace equal to $namespace,
     * the handler $handler is invoked.
     *
     * Repeated calls to listen() with the same namespace simply changes the
     * handler associated with that namespace.
     *
     * @param string   $namespace The namespace of the command request.
     * @param callable $handler   The handler to fulfil the request.
     *
     * @throws InvalidNamespaceException When namespace is invalid.
     */
    public function listen(string $namespace, callable $handler): void;

    /**
     * Unlisten stops listening for command requests in the given namepsace.
     *
     * @param string $namespace The namespace to stop listening for.
     *
     * @throws InvalidNamespaceException When namespace is invalid.
     */
    public function unlisten(string $namespace): void;

    /**
     * Handle command requests and notifications until {@see Peer::stop()} is
     * called.
     */
    public function wait(): void;

    /**
     * Stop instructs the peer to disconnect from the network in a graceful
     * manner once all pending operations have completed.
     *
     * Any calls to Session::call(), command handlers or notification handlers
     * must return before the peer has stopped.
     */
    public function stop(): void;
}
