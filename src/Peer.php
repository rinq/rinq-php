<?php

declare(strict_types=1); // @codeCoverageIgnore

namespace Rinq;
/*
 * Peer represents a connection to a Rinq network.
 *
 * Peers can act as a server, responding to application-defined commands.
 * Use Peer.listen() to start accepting incoming command requests.
 *
 * Command request are sent by sessions, represented by the Session interface.
 * Sessions can also send notifications to other sessions. Sessions are created
 * by calling Peer.Session().
 *
 * Each peer is assigned a unique ID, which is represented by the PeerID struct.
 * All IDs generated by the peer, such as session IDs and message IDs contain
 * the peer ID, so that they can be traced to their origin easily.
 */
interface Peer
{
    /**
     * The peer's unique identifier.
     *
     * @return string The peer's unique identifier.
     */
    public function id(): string

    /**
     * Session creates and returns a new session owned by this peer.
     *
     * Creating a session does not perform any network IO. The only limit to the
     * number of sessions is the memory required to store them.
     *
     * Sessions created after the peer has been stopped are unusable. Any
     * operation will fail immediately.
     *
     * @return Session Newly created session.
     */
    public function session(): Session;

    /**
     * Listen starts listening for command requests in the given namespace.
     *
     * When a command request is received with a namespace equal to $namespace,
     * the handler $handler is invoked.
     *
     * Repeated calls to listen() with the same namespace simply changes the
     * handler associated with that namespace.
     *
     * $handler is invoked on its own routine for each command request.
     *
     * @param string         $namespace The namespace of the command request.
     * @param CommandHandler $handler   The handler to fulfil the request.
     *
     * @return bool True If the listen started in a new namespace.
     */
    public function listen(string $namespace, CommandHandler $handler): bool;

    /**
     * Unlisten stops listening for command requests in the given namepsace.
     *
     * If the peer is not currently listening to $namespace, null is returned
     * immediately.
     *
     * @param string $namespace The namespace to stop listening for.
     *
     * @return bool True If a handler was listening in namespace $namespace.
     */
    public function unlisten(string $namespace): bool;

    /**
     * Done returns a channel that is closed when the peer is stopped.
     *
     * Err() may be called to obtain the error that caused the peer to stop, if
     * any occurred.
     */
    public function done(): Channel;

    /**
     * Err returns the error that caused the done() channel to close.
     *
     * A null return value indicates that the peer was stopped because Stop() or
     * gracefulStop() has been called.
     */
    public function err(): Error;

    /**
     * Stop instructs the peer to disconnect from the network immediately.
     *
     * Stop does NOT block until the peer is disconnected. Use the done()
     * channel to wait for the peer to disconnect.
     */
    public function stop();

    /**
     * GracefulStop() instructs the peer to disconnect from the network once
     * all pending operations have completed.
     *
     * Any calls to Session.Call(), command handlers or notification handlers
     * must return before the peer has stopped.
     *
     * GracefulStop does NOT block until the peer is disconnected. Use the
     * done() channel to wait for the peer to disconnect.
     */
    public function gracefulStop()
}
